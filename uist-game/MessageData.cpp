#include "MessageData.h"

#include "Logging.h"

////////////////////////////////////////////////////////////////////////////////
//
// MessageData
//
////////////////////////////////////////////////////////////////////////////////

MessageData::MessageData()
{
	m_networkServerSession = NULL;
}

////////////////////////////////////////////////////////////////////////////////

void MessageData::setMessageID(MessageID messageID)
{
	m_header.messageID = messageID;
}

////////////////////////////////////////////////////////////////////////////////

MessageID MessageData::messageID()
{
	return m_header.messageID;
}

////////////////////////////////////////////////////////////////////////////////

void MessageData::setContentType(ContentType contentType)
{
	m_header.contentType = contentType;
}

////////////////////////////////////////////////////////////////////////////////

ContentType MessageData::contentType()
{
	return m_header.contentType;
}

////////////////////////////////////////////////////////////////////////////////

void MessageData::setHeader(MessageHeader header)
{
	m_header = header;
}

////////////////////////////////////////////////////////////////////////////////

void MessageData::copyHeaderFrom(void *source)
{
	memcpy((void*)&m_header, source, headerLength());
}

////////////////////////////////////////////////////////////////////////////////

void MessageData::copyContentFrom(void *source)
{
	memcpy((void*)m_content, source, contentLength());
}

////////////////////////////////////////////////////////////////////////////////

void MessageData::copyContentFrom(void *source, ContentLength length)
{
	memcpy((void*)m_content, source, length);
}

////////////////////////////////////////////////////////////////////////////////

void MessageData::copyContentFromString(char *source)
{
	// If content is longer than maximum allowed, throw an exception
	if (strlen(source) + 1 > MAX_MESSAGE_LENGTH)
	{
		Logging::error((std::string)"Could not send message (content is longer "
			+ "than the maximum allowed).");
		return;
	}

	memcpy(m_content, source, strlen(source));

	m_content[strlen(source)] = '\0';
	m_header.contentLength = strlen(source) + 1;
}

////////////////////////////////////////////////////////////////////////////////

char *MessageData::content()
{
	return m_content;
}

////////////////////////////////////////////////////////////////////////////////

void MessageData::setContentLength(ContentLength contentLength)
{
	m_header.contentLength = contentLength;
}

////////////////////////////////////////////////////////////////////////////////

ContentLength MessageData::contentLength()
{
	return m_header.contentLength;
}

////////////////////////////////////////////////////////////////////////////////

ContentLength MessageData::headerLength()
{
	return sizeof(MessageHeader);
}

////////////////////////////////////////////////////////////////////////////////

void MessageData::copyTo(void *destination)
{
	memcpy(destination, (void*)m_content, contentLength());
}

////////////////////////////////////////////////////////////////////////////////

void MessageData::setNetworkServerSession(NetworkServerSession *session)
{
	m_networkServerSession = session;
}

////////////////////////////////////////////////////////////////////////////////

NetworkServerSession *MessageData::networkServerSession()
{
	return m_networkServerSession;
}
